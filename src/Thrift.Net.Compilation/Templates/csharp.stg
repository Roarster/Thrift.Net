document(version, model) ::= <<
// <auto-generated>
// This file was generated by Thrift.Net version $version$. Do not edit this file
// directly - any changes may be lost.
// </auto-generated>
$if(model.CSharpNamespace)$
namespace $model.CSharpNamespace$
{
    $generateDocument(model)$
}
$else$
$generateDocument(model)$
$endif$
>>

generateDocument(model) ::= <<
$model.Enums:generateEnum(); separator="\n\n"$

$model.Structs:generateStruct(); separator="\n\n"$
>>

generateEnum(enum) ::= <<
public enum $enum.Name$
{
    $enum.Members:generateEnumMember(); separator=",\n"$
}
>>

generateEnumMember(member) ::= <<
$member.Name$ = $member.Value$
>>

generateStruct(struct) ::= <<
public class $struct.Name$
{
$if(struct.OptionalFields)$
    private IsSetInfo isSet;
$endif$
    $struct.Fields:generateBackingField(); separator="\n"$

$if(struct.OptionalFields)$
    /// <summary>
    /// Gets information about whether each optional field has been set.
    /// </summary>
    public IsSetInfo IsSet
    {
        get { return this.isSet; }
    }

$endif$
    $struct.Fields:generateField(); separator="\n\n"$

    /// <summary>
    /// Contains the Thrift Ids of all of the fields for use during serialization
    /// and deserialization.
    /// </summary>
    public static class FieldIds
    {
        $struct.Fields:generateFieldId(); separator="\n\n"$
    }
$if(struct.OptionalFields)$

    /// <summary>
    /// Contains an entry for each optional field, indicating whether it has been
    /// set or not.
    /// </summary>
    public struct IsSetInfo
    {
        $struct.OptionalFields:generateIsSetField(); separator="\n\n"$
    }
$endif$
}
>>

backingFieldName(field) ::= <<
_$field.Name$
>>

generateBackingField(field) ::= <<
private $field.Type.CSharpTypeName$ $backingFieldName(field)$;
>>

generateField(field) ::= <<
public $field.Type.CSharpTypeName$ $field.Name$
{
    get
    {
        return $backingFieldName(field)$;
    }

    set
    {
        this.$backingFieldName(field)$ = value;
        this.isSet.$field.Name$ = true;
    }
}
>>

generateFieldId(field) ::= <<
public const int $field.Name$ = $field.FieldId$;
>>

generateIsSetField(field) ::= <<
public bool $field.Name$;
>>
